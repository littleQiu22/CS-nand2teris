// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15],out=isAIns);
    Not(in=isAIns,out=isCIns);

    // multiplex between instruction and ALU output for A register
    // when instruction is A-instruction, value in instruction should be written in A register
    // when instruction is C-instruction and A register is dest, then ALU output should be written in A register
    Mux16(a=ALUOut,b=instruction,sel=isAIns,out=mulForAReg);

    // A register
    // when A-instruction or C-instruction with dest A, then A register should be written
    And(a=instruction[5],b=isCIns,out=isCInsAndADest);
    Or(a=isAIns,b=isCInsAndADest,out=isAWritten);
    ARegister(in=mulForAReg,load=isAWritten,out=AOut,out[0..14]=addressM);


    // multiplex for A/M
    // if instruction is C-instruction and M is used in comp section, then memory is read
    And(a=instruction[12],b=isCIns,out=isCInsAndM);
    Mux16(a=AOut,b=inM,sel=isCInsAndM,out=AOrMOut);

    // for ALU
    ALU(x=DOut,y=AOrMOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUOut,out=outM,zr=ALUZr,ng=ALUNg);


    // write into memory when C-instruction and M is dest
    And(a=instruction[3],b=isCIns,out=writeM);

    // D register
    // when instruction is C-instruction and D is dest, ALU output should be written in D register
    And(a=instruction[4],b=isCIns,out=isCInsAndDDest);
    DRegister(in=ALUOut,load=isCInsAndDDest,out=DOut);

    // PC
    // when instruction is C-instruction and jumping conditions is satisfied, then jump, otherwise increase except for reset case
    Or(a=ALUNg,b=ALUZr,out=ALUNotPos);
    Not(in=ALUNotPos,out=ALUPos);
    And(a=instruction[0],b=ALUPos,out=cond1);
    And(a=instruction[1],b=ALUZr,out=cond2);
    And(a=instruction[2],b=ALUNg,out=cond3);
    Or(a=cond1,b=cond2,out=cond12);
    Or(a=cond12,b=cond3,out=jump);
    And(a=isCIns,b=jump,out=isCInsAndJump);
    Not(in=isCInsAndJump,out=notJump);
    PC(in=AOut,load=isCInsAndJump,inc=notJump,reset=reset,out[0..14]=pc);



}