// bootstrap
@256
D=A
@SP
M=D
@Sys.init
0;JMP
// function Sys.init 0
(Sys.init)
@0
D=A
@R13
M=D
(Sys.init.initLoopIn)
@R13
D=M
@Sys.init.pushLocal
D;JGT
@Sys.init.initLoopOut
0;JMP
(Sys.init.pushLocal)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
@R13
M=M-1
@Sys.init.initLoopIn
0;JMP
(Sys.init.initLoopOut)
// push constant 6
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 8
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Class1.set 2
@Sys.init$ret0
D=A
@SP
M=M+1
A=M-1
M=D
// push LCL
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
// push ARG
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
// push THIS
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push THAT
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
// push SP
@SP
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(Sys.init$ret0)
// pop temp 0
@5
D=A
@0
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// call Class1.get 0
@Sys.init$ret1
D=A
@SP
M=M+1
A=M-1
M=D
// push LCL
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
// push ARG
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
// push THIS
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push THAT
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
// push SP
@SP
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(Sys.init$ret1)
// pop temp 0
@5
D=A
@0
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// push constant 23
@23
D=A
@SP
M=M+1
A=M-1
M=D
// push constant 15
@15
D=A
@SP
M=M+1
A=M-1
M=D
// call Class2.set 2
@Sys.init$ret2
D=A
@SP
M=M+1
A=M-1
M=D
// push LCL
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
// push ARG
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
// push THIS
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push THAT
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
// push SP
@SP
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 7
@7
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(Sys.init$ret2)
// pop temp 1
@5
D=A
@1
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// call Class2.get 0
@Sys.init$ret3
D=A
@SP
M=M+1
A=M-1
M=D
// push LCL
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
// push ARG
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
// push THIS
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
// push THAT
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
// push SP
@SP
D=M
@SP
M=M+1
A=M-1
M=D
// push constant 5
@5
D=A
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(Sys.init$ret3)
// pop temp 1
@5
D=A
@1
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
// function Class1.set 0
(Class1.set)
@0
D=A
@R13
M=D
(Class1.set.initLoopIn)
@R13
D=M
@Class1.set.pushLocal
D;JGT
@Class1.set.initLoopOut
0;JMP
(Class1.set.pushLocal)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
@R13
M=M-1
@Class1.set.initLoopIn
0;JMP
(Class1.set.initLoopOut)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 0
@16
D=A
@0
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@16
D=A
@1
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
D=M
A=D
0;JMP
// function Class1.get 0
(Class1.get)
@0
D=A
@R13
M=D
(Class1.get.initLoopIn)
@R13
D=M
@Class1.get.pushLocal
D;JGT
@Class1.get.initLoopOut
0;JMP
(Class1.get.pushLocal)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
@R13
M=M-1
@Class1.get.initLoopIn
0;JMP
(Class1.get.initLoopOut)
// push static 0
@16
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@16
D=A
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
D=M
A=D
0;JMP
// function Class2.set 0
(Class2.set)
@0
D=A
@R13
M=D
(Class2.set.initLoopIn)
@R13
D=M
@Class2.set.pushLocal
D;JGT
@Class2.set.initLoopOut
0;JMP
(Class2.set.pushLocal)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
@R13
M=M-1
@Class2.set.initLoopIn
0;JMP
(Class2.set.initLoopOut)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 0
@16
D=A
@0
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// push argument 1
@1
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
// pop static 1
@16
D=A
@1
D=D+A
@R15
M=D
@SP
M=M-1
A=M
D=M
@R15
A=M
M=D
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
D=M
A=D
0;JMP
// function Class2.get 0
(Class2.get)
@0
D=A
@R13
M=D
(Class2.get.initLoopIn)
@R13
D=M
@Class2.get.pushLocal
D;JGT
@Class2.get.initLoopOut
0;JMP
(Class2.get.pushLocal)
// push constant 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
@R13
M=M-1
@Class2.get.initLoopIn
0;JMP
(Class2.get.initLoopOut)
// push static 0
@16
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static 1
@16
D=A
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//sub
@SP
M=M-1
A=M-1
D=M
A=A+1
D=D-M
A=A-1
M=D
// return
@LCL
D=M
@R13
M=D
@5
D=D-A
A=D
D=M
@R14
M=D
// pop ARG
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R13
M=M-1
A=M
D=M
@THAT
M=D
@R13
M=M-1
A=M
D=M
@THIS
M=D
@R13
M=M-1
A=M
D=M
@ARG
M=D
@R13
M=M-1
A=M
D=M
@LCL
M=D
@R14
D=M
A=D
0;JMP
//auto end loop
(AUTO_END_LOOP)
@AUTO_END_LOOP
0;JMP
